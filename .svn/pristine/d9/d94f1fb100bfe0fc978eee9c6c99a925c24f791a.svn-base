JavaScript
	网景公司开发的一款客户端(浏览器)脚本语言
	不需要编译,可以直接在浏览器中运行
	
	
	作用
		在客户端动态的生成页面
		在客户端做数据格式的校验
		发送ajax请求(与后面的servlet有关)
		
	怎么用?
	
	引入方式(详见js.html):
	类似于CSS
		1.简短的缩写方式,相当于css的行内式
			<input type="button" value="弹出" onclick="javaScript:alert('Hello JavaScript')"><br/>
   			 用户名:<input type="text" onblur="javaScript:alert('用户名可用');">
			双引号里面再用双引号,需要改成单引号
		
		2.在html中定义js部分,相当于css的内联样式
		
		3.外部引入
			定义一个.js文件
			将这个js文件引入到html中
			
	
	变量的命名
		int i = 1;
		number i = 1;
		var i = 1;
		先声明后赋值		var num; num = 1;
		声明的同时赋值		var num = 1;
		不声明直接赋值		num = 1;
	
	js是一个弱类型的语言
	所谓的弱类型是相对于强类型来说的
	强类型中的数据类型很多,类似int i =1;。。。。。。
	在js中只有一种,就是var,为变量赋值的时候会自动判断类型并进行转换
	js的数据类型是运行时确定,可以随时改变该变量的类型
	==表示只判断值
	===表示不仅判断值,并且判断使用时候的类型
	数据类型
		基本数据类型
			number		整数或浮点数
			boolean		布尔类型
			string		用单引号或双引号声明的字符串
			null		空
			undefined	未定义,变量被声明,但是未被赋值
		
		typeof 变量名			判断变量当前的类型
		
		null输出的类型是object
		undefined无法输出类型,因为未赋值,无法判断
		
		
		parseInt(s);  将s转换为int;
		
		prompt:表示一个提示框(输入框)
			prompt(s):表示接受用户输入的数据,s表示这个输入框的提示
			prompt(s1,s2):s1表示输入框的提示,s2表示默认值
		字符串常用方法以及属性:
			length属性:返回字符串长度
			charAt(index):返回指定位置的字符
    		subString(from,to):截取字符串,返回从from到to位置的一个字符串,前闭后开
    		subString(index):从index位置开始,截取到最后
    		indexOf(str):查询str字符在字符串中第一次出现的位置
    		indexOf(str,index):从index位置开始查询,str字符第一次出现的位置
    		toLowerCase():将字符串转换为小写
    		toUpperCase():将字符串转换为大写
    		trim():去除空格
    		split(str):分割字符串
		
		
		正则表达式RegExp
			正则表达式是Regular Expression的缩写,
			用于查询符合某些规则的字符串的工具
			语法:
				/表达式/附加参数
			在js中,正则表达式需要使用//包起来
			附加参数:
				g	全局匹配,匹配同一行中多次出现的字符
				i	匹配时忽略大小写
				m	执行多行匹配
			
			RegExp对象常用的方法:
				test:字符串校验
				exec:检索字符串
			
			正则表达式中表示出现次数的字符:
				{m,n}:匹配前一项字符至少出现m次,最多出现n次
				{m}:匹配前一项m次
				{m,}:匹配前一项至少出现m次
				+:匹配前一项出现1次或者多次,等价于{1	,}
				*:匹配前一项出现0次或者多次,等价于{0,}
				?:匹配前一项出现0次或者1次,等价于{0,1}
			
			预定义字符类:
				\w:匹配英文字母、数字或者下划线,等价于[a-zA-Z0-9_]
				\W:除了\w外的所有的,相当于[^a-zA-Z0-9_]
				\d:匹配数字,相当于[0-9]
				\D:匹配非数字,相当于[^0-9]
				\s:匹配空白字符
				\S:匹配非空白字符	
				.:匹配所有字符,除了换行和行结束符	
				
				
			表达式的一些特殊符号:
				/.../:表示一个正则表达式的开始结束
				^:字符串开始,即行的开始
				$:字符串的结束
				[]:可匹配的列表
				():分组
				|:或者
				[^]:非
				
				
				
				
		复合数据类型
			数组
				三种定义方式:
				var arr = new Array();
					表示该数组初始的长度为0,但是若元素的个数增加,会自动扩张数组的长度
				
				var arr = new Array(2);
					表示该数组初始的长度为2,但是若元素的个数增加,会自动扩张数组的长度
				
				var arr = new Array(1,2,3);
					表示该数组初始的长度为3,且前三个元素值为1,2,3,但是若元素的个数增加,会自动扩张数组的长度
					
				var arr = [1,2,3]
					这是一个json语法的数组
					
				数组的类型可以不一致
				数组长度是可变的
				
				常用属性和方法:
					length:属性,获取数组的长度
					sort():排序,升序
					reverse():数组反转,将元素的顺序反转过来
					concat():arr1.concat(arr2),将arr1与arr2连接起来,合并成一个新的数组
					join():将数组中的所有的元素通过某个字符串联起来,若不传参数,默认是逗号
					slice(start,end):用来截取数组中的一部分元素,start和end是number类型的
						start:从什么位置开始截取,end:截取到什么位置
						前闭后开
					slice(m):从m位置截取到最后
					toString():将数组转换为一个字符串,中间以逗号分隔	
						
			函数
				不能有返回值类型,可以有返回值
				函数的参数个数可以有任意个(可变长参数)
				函数的参数列表里的参数实际上是给参数取了个别名
				在js中有一个arguments的内置对象表示函数的参数,是一个数组
				for(var i = 0; i < arguments.length; i++){
    				alert(arguments[i]);
    			}
    			在js中不存在重载,只有覆盖
    			由上往下执行,若果有相同的函数,最终执行的是最后一个
				
				在js中,函数名后加()表示加载到该处的时候调用该函数,
				函数名后不加()表示这是一个函数的属性
				
			对象
				js不是面向对象语言
				基于对象语言
				在js中,所有的对象都是object
			日期
			
	
	
	
